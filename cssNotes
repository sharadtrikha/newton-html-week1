



HTML -> is for creating base structure (How ? with the help of HTML TAGS/Elements)

CSS -> 
(Cascading StyleSheet)

Usecase ->

1. To style these HTML TAGS
2. To provide or to change/alter Layout

Implementation ?
How to use CSS ?

There are 3 ways :
1. Inline - CSS_PROPERTY_NAME: VALUE;
2. Internal - SELECTOR {
                CSS_PROPERTY_NAME: VALUE
              }

SELECTOR ?
CSS wants to know on which HTML Tag you want to apply css on ?
eg - div, span, h1, img, section, article ????

Apart from that, SELECTOR can be any id or class value also.


    <style>
        h1 {
            background-color: red;
            color: green;
        }
    </style>

3. External

        h1 {
            background-color: red;
            color: green;
        }

        <link rel="stylesheet" href="cssDay1.css" />

CSS Syntax :

SELECTOR {
    CSS_PROPERTY_NAME: VALUE
}


-----

h1 -

Red color - inline
aqua color - internal
blue color - external



What will be the final color on browser ?

Priority :

INLINE > 

----------------------

aqua color - internal
blue color - external

Can i say ? 
INTERNAL > EXTERNAL ? NO 

Conclusion w.r.t Precedence :

INLINE > INTERNAL OR EXTERNAL (Based on their position inside Head tag)


-----------------------------------------------

During our html lectures : 
we used to talk on 2 html attributes :
id (indicates UNIQUENESS), class 


Only 2nd paragraph to be colored as yellow ?



----------------------------------------------

Selectors :

Basics :


1. ELEMENT Selector :

p {} 
div {}

2. ID Selector :

#ID_NAME {}

3. CLASS Selector :

.CLASS_NAME {}

4. CLASS Selector with ELEMENT :

<ELEMENT_NAME><CLASS_NAME>

5. ID Selector with ELEMENT :

<ELEMENT_NAME><ID_NAME>




eg : p.bgColor -> apply css ONLY to those p tags which are having bgColor class

5. Global Selector :
    Symbol - *


Combinators Selectors :

Combination of more than one selector.

1. Descendent selector (space)

<SELECTOR1><SPACE><SELECTOR2>...............<SPACE><SELECTOR N> {

}



-> ALL SELECTOR2 (all childrens/grandchildrens) under SELECTOR1 (parent) should be selected

2. Child Selector (>) :

syntax : <SELECTOR1> > <SELECTOR2> .......

-> Select only direct children (SELECTOR2) of parent (SELECTOR1)



3. General Sibling (~):

syntax : <SELECTOR1>~<SELECTOR2> ....

4. Adjacent Sibling (+) :

syntax : <SELECTOR1>+<SELECTOR2> .....

----------------------------------------------------

Pseudo elements :

syntax: <SELECTOR>::<PSEUDO_ELEMENT>

-> to style any html tag before/after.
-> to style first letter, first sentence.
syntax :

<SELECTOR>::<PSEUDO_ELEMENT>

Task :
BgColor only first word/letter of paragraph tag ?

1. first-letter
2. first-line 
3. marker
4. before
5. after
6. selection


-------------------------------------------------------

Pseudo Classes :

Syntax : <SELECTOR>:<NAME_OF_PSEUDO_CLASS>

--> is used to define STATE of HTML elements. eg - hover, click, focus, etc


Example :

Anchor tag (a).
Anchor tag has its own multiple states :

1. link
2. visited
3. hover
4. active

--> Order of applying these pseudo classes is important


Forms :


Pseudo Class :

1. :focus
2. :required
3. :valid
4. :invalid
5. :disabled
5. :checked (not working - border css property)
6. :read-only
7. :read-write
8. :enabled
9. :optional

--------------------------------------------------------


Attribute selector
syntax : [attribute]

Variants :

1. SELECTOR[ATTRIBUTE_NAME]
2. SELECTOR[ATTRIBUTE_NAME=VALUE]
3. SELECTOR[ATTRIBUTE_NAME^=VALUE] --> used when something starts with
4. SELECTOR[ATTRIBUTE_NAME$=VALUE]--> used when something ends with
5. SELECTOR[ATTRIBUTE_NAME*=VALUE] --> used for substrings

6. SELECTOR[ATTRIBUTE_NAME~=VALUE] -> use for Search EXACT VALUE AND SPACE SEPARATED VALUE 
7. SELECTOR[ATTRIBUTE_NAME|=VALUE] -> use For Search EXACT VALUE AND - SEPARATED
VALUE


--------------------------------------------

Pseudo Classes :

(can be applied to any html element):

1. :first-child
2. :last-child
3. :first-of-type
4. :last-of-type
5. :nth-child() -> it takes number as input, also it takes values like 
    "even/odd" and it also takes formula -> 
    AN+B

    where A -> step size
        N -> number...starts from 0,1,2
        B -> offset

Remember -> N starts from 0 but UI counting starts from 1.

6. :nth-last-child() -> it takes number as input, also it takes values like 
    "even/odd" and it also takes formula -> 
    AN+B

    where A -> step size
        N -> number...starts from 0,1,2
        B -> offset

7. :nth-of-type() ->

    Combination of of-type (means it looks for the exact mentioned child irrespective of its position inside parent. Only thing matters here is
    its own Order) kind of behaviour + nth kind of behavour (numbers, 
    even/odd, AN+B formula)

8. :nth-last-of-type ->
     Combination of of-type (means it looks for the exact mentioned child irrespective of its position inside parent. Only thing matters here is
    its own Order) kind of behaviour + nth-last kind of behavour (numbers, 
    even/odd, AN+B formula)


-------------------------------------

Specificity :

Each element have its own specificity.

INLINE CSS - 1000
ID - 100 (Specificity value)
CLASS, PSEUDO-CLASS, ATTRIBUTE SELECTORS - 10
ELEMENT, PSEUDO-ELEMENTS - 1

eg :

#dummy div.random:focus {}

CALCULATE Specificity = 100 + 1 + 10 + 10 = 121


Code is read from top to bottom. Also, there is a priority.
INLINE CSS > INTERNAL OR EXTERNAL Depends on where it is written

----------------------------------------

COLORS 

1. rgb
2. rgba
3. HEX code
4. hsl
5. hsla

color: red;

How many ways in which we can represent red ?

1. rgb ->
(RED GREEN BLUE)

rgb(RED,GREEN,BLUE)
Range -> 0-255

2. rgba ->

extension of rgb only.
a -> alpha

rgb(RED,GREEN,BLUE,ALPHA)

ALPHA -> Opacity
Value ranges from -> 0 to 1.


3. HEX code :

color : #RRGGBB;

R,G,B -> 0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f

color: #00FF00

ShortCut/Shorthand :

color : #RGB;

color: #0F0

4. hsl :

H -> Hue
S -> Saturation
L -> light

Hue -> represent color -> RGB
0-360

0,360 -> Red
120 -> Green
240 -> Blue 

Saturation -> 
Degree of greyness.
Percentage - 0-100%

Light ->
Intensity
-> degree of white/black
Percentage - 0-100%

5. hsla :

Extn of hsl
A -> Alpha
opacity
