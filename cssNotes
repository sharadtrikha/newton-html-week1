



HTML -> is for creating base structure (How ? with the help of HTML TAGS/Elements)

CSS -> 
(Cascading StyleSheet)

Usecase ->

1. To style these HTML TAGS
2. To provide or to change/alter Layout

Implementation ?
How to use CSS ?

There are 3 ways :
1. Inline - CSS_PROPERTY_NAME: VALUE;
2. Internal - SELECTOR {
                CSS_PROPERTY_NAME: VALUE
              }

SELECTOR ?
CSS wants to know on which HTML Tag you want to apply css on ?
eg - div, span, h1, img, section, article ????

Apart from that, SELECTOR can be any id or class value also.


    <style>
        h1 {
            background-color: red;
            color: green;
        }
    </style>

3. External

        h1 {
            background-color: red;
            color: green;
        }

        <link rel="stylesheet" href="cssDay1.css" />

CSS Syntax :

SELECTOR {
    CSS_PROPERTY_NAME: VALUE
}


-----

h1 -

Red color - inline
aqua color - internal
blue color - external



What will be the final color on browser ?

Priority :

INLINE > 

----------------------

aqua color - internal
blue color - external

Can i say ? 
INTERNAL > EXTERNAL ? NO 

Conclusion w.r.t Precedence :

INLINE > INTERNAL OR EXTERNAL (Based on their position inside Head tag)


-----------------------------------------------

During our html lectures : 
we used to talk on 2 html attributes :
id (indicates UNIQUENESS), class 


Only 2nd paragraph to be colored as yellow ?



----------------------------------------------

Selectors :

Basics :


1. ELEMENT Selector :

p {} 
div {}

2. ID Selector :

#ID_NAME {}

3. CLASS Selector :

.CLASS_NAME {}

4. CLASS Selector with ELEMENT :

<ELEMENT_NAME><CLASS_NAME>

5. ID Selector with ELEMENT :

<ELEMENT_NAME><ID_NAME>




eg : p.bgColor -> apply css ONLY to those p tags which are having bgColor class

5. Global Selector :
    Symbol - *


Combinators Selectors :

Combination of more than one selector.

1. Descendent selector (space)

<SELECTOR1><SPACE><SELECTOR2>...............<SPACE><SELECTOR N> {

}



-> ALL SELECTOR2 (all childrens/grandchildrens) under SELECTOR1 (parent) should be selected

2. Child Selector (>) :

syntax : <SELECTOR1> > <SELECTOR2> .......

-> Select only direct children (SELECTOR2) of parent (SELECTOR1)



3. General Sibling (~):

syntax : <SELECTOR1>~<SELECTOR2> ....

4. Adjacent Sibling (+) :

syntax : <SELECTOR1>+<SELECTOR2> .....

----------------------------------------------------

Pseudo elements :

syntax: <SELECTOR>::<PSEUDO_ELEMENT>

-> to style any html tag before/after.
-> to style first letter, first sentence.
syntax :

<SELECTOR>::<PSEUDO_ELEMENT>

Task :
BgColor only first word/letter of paragraph tag ?

1. first-letter
2. first-line 
3. marker
4. before
5. after
6. selection


-------------------------------------------------------

Pseudo Classes :

Syntax : <SELECTOR>:<NAME_OF_PSEUDO_CLASS>

--> is used to define STATE of HTML elements. eg - hover, click, focus, etc


Example :

Anchor tag (a).
Anchor tag has its own multiple states :

1. link
2. visited
3. hover
4. active

--> Order of applying these pseudo classes is important


Forms :


Pseudo Class :

1. :focus
2. :required
3. :valid
4. :invalid
5. :disabled
5. :checked (not working - border css property)
6. :read-only
7. :read-write
8. :enabled
9. :optional

--------------------------------------------------------


Attribute selector
syntax : [attribute]

Variants :

1. SELECTOR[ATTRIBUTE_NAME]
2. SELECTOR[ATTRIBUTE_NAME=VALUE]
3. SELECTOR[ATTRIBUTE_NAME^=VALUE] --> used when something starts with
4. SELECTOR[ATTRIBUTE_NAME$=VALUE]--> used when something ends with
5. SELECTOR[ATTRIBUTE_NAME*=VALUE] --> used for substrings

6. SELECTOR[ATTRIBUTE_NAME~=VALUE] -> use for Search EXACT VALUE AND SPACE SEPARATED VALUE 
7. SELECTOR[ATTRIBUTE_NAME|=VALUE] -> use For Search EXACT VALUE AND - SEPARATED
VALUE


--------------------------------------------

Pseudo Classes :

(can be applied to any html element):

1. :first-child
2. :last-child
3. :first-of-type
4. :last-of-type
5. :nth-child() -> it takes number as input, also it takes values like 
    "even/odd" and it also takes formula -> 
    AN+B

    where A -> step size
        N -> number...starts from 0,1,2
        B -> offset

Remember -> N starts from 0 but UI counting starts from 1.

6. :nth-last-child() -> it takes number as input, also it takes values like 
    "even/odd" and it also takes formula -> 
    AN+B

    where A -> step size
        N -> number...starts from 0,1,2
        B -> offset

7. :nth-of-type() ->

    Combination of of-type (means it looks for the exact mentioned child irrespective of its position inside parent. Only thing matters here is
    its own Order) kind of behaviour + nth kind of behavour (numbers, 
    even/odd, AN+B formula)

8. :nth-last-of-type ->
     Combination of of-type (means it looks for the exact mentioned child irrespective of its position inside parent. Only thing matters here is
    its own Order) kind of behaviour + nth-last kind of behavour (numbers, 
    even/odd, AN+B formula)


-------------------------------------

Specificity :

Each element have its own specificity.

INLINE CSS - 1000
ID - 100 (Specificity value)
CLASS, PSEUDO-CLASS, ATTRIBUTE SELECTORS - 10
ELEMENT, PSEUDO-ELEMENTS - 1

eg :

#dummy div.random:focus {}

CALCULATE Specificity = 100 + 1 + 10 + 10 = 121


Code is read from top to bottom. Also, there is a priority.
INLINE CSS > INTERNAL OR EXTERNAL Depends on where it is written

----------------------------------------

COLORS 

1. rgb
2. rgba
3. HEX code
4. hsl
5. hsla

color: red;

How many ways in which we can represent red ?

1. rgb ->
(RED GREEN BLUE)

rgb(RED,GREEN,BLUE)
Range -> 0-255

2. rgba ->

extension of rgb only.
a -> alpha

rgb(RED,GREEN,BLUE,ALPHA)

ALPHA -> Opacity
Value ranges from -> 0 to 1.


3. HEX code :

color : #RRGGBB;

R,G,B -> 0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f

color: #00FF00

ShortCut/Shorthand :

color : #RGB;

color: #0F0

4. hsl :

H -> Hue
S -> Saturation
L -> light

Hue -> represent color -> RGB
0-360

0,360 -> Red
120 -> Green
240 -> Blue 

Saturation -> 
Degree of greyness.
Percentage - 0-100%

Light ->
Intensity
-> degree of white/black
Percentage - 0-100%

5. hsla :

Extn of hsl
A -> Alpha
opacity


---------------------------------------

Background images :

1. background-image : url()
2. backgroun-repeat: 
3. background-size: cover, contain, auto(default), single value -> it takes width as input and assumes height as "auto"



-----------------------------------------

Box-Model :
it says everything is a box (reactangle) in HTML.
BOX -> CONTENT + PADDING + BORDER + MARGIN 

Content -> actual content 
Padding -> Distance between content n border
Border -> actual border
Margin -> Distance between 2 elements


padding, margin :

Syntax :

padding : 10px or margin : 10px

-> means apply padding/margin on top, right, bottom, left -> 10px

Individual ?
What if i want to apply on top only ?
padding-top: 10px;

Left -> padding-left: 10px
bottom -> padding-bottom: 10px
Right -> padding-right: 10px.....


What to apply margin or padding in all 4 directions but different values ?

TOP - 20px
Right - 10px
bottom - 30px
left - 25px

Shorthand property :
padding: 20px 10px 30px 25px; (clockwise TOP -> right -> bottom -> left)

------------------------

What to apply same values in top and bottom but different in left 
and right ?

Top - 20px
Bottom - 20px
left - 15px
right - 15px

padding: 20px 15px 20px 15px;
OR 
padding: T/B L/R;
padding: 20px 15px;

Margin Collapse ?
It happens only in vertical sceanrio.
Whichever value is greatest..that will be taken

Margin-bottom: 50px
Margin-top: 30px


Note :

Inline elements - margin-top, margin-bottom doesn't work
-------------------------


Calculation :

2 div with id - one n two :

div#one :
How much is the width ?
width -> 500 ?


div#two :
How much is the width ?
width -> ? 520, 500, 540, 200, 540+

WIDTH = CONTENT + PADDING-LEFT + PADDING-RIGHT + BORDER-LEFT    + BORDER-RIGHT 

WIDTH -> 500px 
ACTUAL WIDTH -> 542px

MY WISH ?
is width -> 500px then it should always be 500!

How to make it possible ?
If we can consider PADDING-LEFT + PADDING-RIGHT + BORDER-LEFT    + BORDER-RIGHT -> inside width only ? -> then it's possible

--------------------------------------
box-sizing :
helps/alter to calc. width/height of HTML ELEMENTs.

1. content-box (default)
2. border-box

----------------------------------------

CSS UNITS :

1. px - pixel - FIXED UNIT (Not recommended/last resort)
2. em - size calculation w.r.t parent element
3. rem - size calculation w.r.t root element (html tag if not implemented it will take from browser default - 16px) eg - font-size, margin, padding
4. % - width/height 
5. vw - VIEWPORT WIDTH - 1vw -> 1 portion of viewport width
6. vh - VIEWPORT Height
7. ch - characters - blogpost -> where there is a requirement of not having too many
characters in a single line.

Default/Standard Font size : 16px

1rem -> 16px(browser default)
1.2rem -> 1.2 * 16px -> 
1.5rem -> 1.5 * 16px -> 24px
1.5rem -> 1.5 * 24px (browser default) -> 


--------------------------------

em ->
size calculation w.r.t parent element

<div>
    <p>

div -> font-size : 2rem (2 * 16px) -> 32px

p -> font-size: 1.5rem (1.5 * 16px) -> 24px
p -> font-size: 1.5em (1.5 * 2rem) -> (1.5 * 2 * 16) -> 48px


------------------------------------


Text/Typography :

1. text-align: center
2. text-transform: capitalize, uppercase, lowercase
3. white-space
4. overflow
5. text-overflow

FONTS :

1. font-family : A,B,C,D,E where A,B,C,D,E - fonts -> fallbacks -> If A is not available in the OS, go for B, if B is not available, go for C
2. font-size
3. font-weight - to make text bold, bolder. It accepts values like  -1oo, 200,300,400,
500,600
------------------------------------------------------------

CSS USAGE W.R.T LAYOUT :

display:

1. block
2. inline
3. inline-block (NEW!) - mix of inline n block properties

Inline :
1. Starts on same line
2. Only occupy space which is required for its content

Block :
1. Starts from Next line
2. Its occupies all the available width

Inline-block :

1. Its occupies all the available width and Starts from Next line (INITIALLY)
2. If width is given, then, it takes only that much space (JUST LIKE INLINE ELEMENT)
    and also, it Starts on same line (JUST LIKE INLINE ELEMENT)


-------------------------------------------------------

POSITIONs :

1. static (default)
2. relative - top, bottom, left, right
3. absolute
4. fixed
5. sticky

position:

1. relative 
and after applying it,,,,used offsets -> top, left, bottom, right

2. absolute

OFFSET VALUES are Relative to NEAREST POSITIONED PARENT

Observations :

1. It gives up the space allocated to the html element.
2. It appears to be FLOATING over html page

3. fixed

OFFSET VALUES are Relative to VIEWPORT

Observation :

1. Almost same as position absolute but it STICKS!(fixed) around during scroll.


4. sticky (Combination of relative + fixed)

Observation :

1. Initially it appears same as position: relative
2. Whenever threshold (offset value) is crossed, it starts behaving as position fixed.

Ques: 
What is the diff. between position fixed n position absolute ?

--> In one, element will not scroll and in one, it will!
-> In fixed, OFFSET VALUES are Relative to VIEWPORT and 
In absolute, OFFSET VALUES are Relative to NEAREST POSITIONED PARENT


-------------------------------------------------------------


FLOATING :

When we say positioned elements(absolute, fixed, sticky), we say
these elements are floating on top of our html content...

Technical name - STACKING CONTEXT

Bascially, whats happens, when we apply any position, new STACKING
CONTEXT is formed.

CSS property that helps us play with stacking context ?
z-index

Element with higher z-index, wins!

Note:
z-index property only works when element is POSITIONED (any position value other than static)

float & clear 


-----------------------------------------------------------------

FLEXBOX :

Layout system.
One dimensional layout system.

Flexbox :

2 Roles :

1. Flex Container
Any parent element having property display: flex;


2. Flex items
Direct children of flex container


Flexbox :

1. Rows
2. Columns

By default, flexbox places flex items in a row.
Above statement is not exactly true ->
By default, flexbox places flex items on a MAIN-AXIS.

BY default, MAIN-AXIS is ROW (x axis)
CROSS-AXIS is COLUMN (Y axis)

Observations :
All flex-items starts behaving differently, ie.
Block elements do not behave like block!


Axis :

1. Main-axis (default: row)
2. Cross-axis(default: column)


both the axis are governed by a property called flex-direction.


Main-axis/Cross-axis :

1. Start point - starting point of my main/Cross-axis
2. End point - starting point of my main/Cross-axis




Properties applicable on Flex container :

1. flex-direction (default: row)

2. justify-content : 

It works on MAIN-AXIS.
flex-start, flex-end, center, space-between, space-around, space-evenly

3. align-items: (stretch)

It works on CROSS-AXIS.
flex-start, flex-end, center

4. flex-wrap (default: no-wrap)

flex-wrap: wrap

5. flex-flow (shorthand property) - <flex-direction> <flex-wrap>

6. gap - to have some distance(GAP) between flex items

7. align-content (Mostly used when there is a property applied called 
    flex-wrap: wrap) . It is used to determine the spacing between line


FLEX-ITEMS :

1. order
2. flex-grow (Default: 0)

flex-grow: 0 -> even if any space is left in the flex-container still do not use it.


3. flex-shrink (default: 1)
flex-shrink: 1 -> if space is getting lesser n lesser on the flex-container, then, please shrink flex-item along with it.

4. flex-basis 
5. flex (shorthand property) - flex-grow flex-shrink flex-basis

6. align-self

Scenarios :

flex-direction: row (MAIN-AXIS)

And I want to place my flex items in the center horizontally ?
justify-content: center;


And I want to place my flex items in the center vertically ?
align-items: center;


And I want to place my flex items in the end vertically ?
align-items: flex-end;


---------------------------------------------------------------


flex-direction: column (MAIN-AXIS)

And I want to place my flex items in the center horizontally ?
align-items: center;

And I want to place my flex items in the center vertically ?
justify-content: center;



----------------------

Some useful css properties:


text-align: center -> applied on parent ... will be applicable on all childs

max-width -> max. width that should be allowed
min-width -> min. width that should be allowed

line-height -> unit less value (relative to font-size) ~ 1.5 looks good 
letter-spacing -> to increase/decrease space between letter
display -> none (in order to hide some html element)


------------

RWD (RESPONSIVE WEB DESIGN) :

1. <meta name="viewport" value="width=device-width, intial-scale=1">



MEDIA Query :

Based on media/device and its condition....change certain css

Syntax :

@media (<CONDITION>) {
    // css code goes here
}

CONDITION :

1. max-width -> MAX VALUE or LESS THAN MAX VALUE

-----------------------------

Mobile First Development/Approach :

1. Code your html/css for mobile users first!
2. Then apply media queries (if required) to scale it for desktop/laptop users.
3. In your Media-query, condition changes from max-width to min-width.



Media Query - ORIENTATION :

@media (orientation: landscape) {} -> 
applicable only when width of viewport  > height of viewport



----------------------------------------------------


GRID LAYOUT :

2 dimensional layout system.

Roles :

1. container
2. items


who is a container ?
display: grid

who is a item (grid-child/grid-item) ?
Only those elements who are DIRECT children of CONTAINER


Terms :

Columns 
Rows 

Unit used :

fr (fraction) - 1 fraction of the total available space.

Dotted lines separating these items(grid-items) -> GRID LINES 

I want 3 columns and 2 rows.

Container Properties :

1. display : grid
2. grid-template-columns (1fr 1fr or repeat(2,1fr))
3. grid-template-rows
4. gap (shorthand) -> <ROW_GAP> <COLUMN_GAP>
5. row-gap
6. column-gap
7. justify-items
8. align-items
9. place-items
10. grid-area (SHORTHAND) : <GRID-row-start-line-no.>/<GRID-col-start-line-no.>/<<GRID-row-end-line-no.>>/<GRID-col-end-line-no.>


-----------

I want first item to SPAN across 2 or more columns, grid-column-start and grid-column-end
I want first item to SPAN across 2 or more rows, 
grid-row-start and grid-row-end

Shorthands property:

grid-row: <GRID-ROW-START>/<GRID-ROW-END>
grid-column: <GRID-COLUMN-START>/<GRID-COLUMN-END>


------------------------------------------------------------

Gradients
Animations
Pseudo classes/elements
Css variables


--------------------------------



Animations :

When we change any style - in between transition.

Anything that transitions -> 

0-100 

0...1...10...25...50..75..100
(Transition started)       (Transition ended)


Question -

Initially div is of color red...then when transition starts...make it yellow..
and when transition is about to end...make it green

animation-name : <IDENTIFIER>

animation-duration -> tells how long animate should contiune (default : 0).
it takes seconds and milliseconds as input - 2s,3s,1ms,10ms

@keyframes <IDENTIFIER> {
    from -> stage of transition when animation starts
    to -> stage of transition when animation ends (about to end)
}

There is another way of writing code inside @keyframes ->

@keyframes <IDENTIFIER> {
    0% {}
    .
    .
    30% {}
    .
    .
    50% {}
    .
    .
    100% {}
}


Question :
I want to start my animate after some time ?
animation-delay


Question:
I want to start my animation in reverse ?
animation-direction

Shorthand property:
animation: name duration timing-function delay iteration-count direction fill-mode;



-------------------------------------------------------------


Gradients :

1. linear-gradient 

Syntax :

linear-gradient(direction, color1,color2,color3......color n);

if direction is not given..it is taken as "to bottom"

eg - 

background-image: linear-gradient(red, green); -> Color transitioning from red to green -> in top to bottom fashion


Using angles :

0deg -> to top
90deg -> to right
180deg -> to bottom

2. radial-gradient
3. conic-gradient


--------------------------------------------

Shadows :

box-shadow : <Right_portion> <Botton_portion> <degree_of_blur> <degree_of_spread> <color_of_shadow>;

Right_portion -> positive value -> right side of html element
                -> negative value -> left side of html element

Botton_portion ->-> positive value -> bottom side of html element
                -> negative value -> top side of html element


-----------------------------------------------


CSS Variables :

:root {
    --variable_name: "value";
}

.class_name {
    background-color: var(--variable_name, FALLBACK_VALUE);
}

FALLBACK_VALUE -> optional

----------------------------------------------

